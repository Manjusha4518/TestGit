package test.fast.extractValidations;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.nyl.base.Constants;
import com.nyl.base.WebBase;
import com.nyl.printpolicy.excel.ExcelToMap1;

import com.nyl.utilities.FASTSystemLibrary;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.util.DateFormatConverter;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class PrintPolicy extends WebBase {

	@BeforeClass
	public void reportInitialize() {
		testResultsFolderPath = Constants.EXTRACTS_REPORTS_FOLDER_PATH;
		testReportName = "PrintPolicyValidation";
		considerBlankValue = true;
		setupTestsAndReport();
	}

	@Parameters({"jsonFilePath", "excelFilePath", "mappingFilePath"})
	@Test
	public void validatePrintPolicyExtract(String jsonFilePath, String excelFilePath, String mappingFilePath) throws IOException {

		File jsonFolder=new File(jsonFilePath);
		File[] jsonFiles=jsonFolder.listFiles((dir,name)->name.endsWith(".txt"));

		if(jsonFiles==null ||jsonFiles.length==0)
		{
			System.err.println("No JSON files found in the specified folder.");
			return;
		}

		// Load Excel workbook
		FileInputStream fileInputStream = new FileInputStream(excelFilePath);
		Workbook workbook = new XSSFWorkbook(fileInputStream);

		// Read mapping from Excel
		FileInputStream mappingFileInputStream = new FileInputStream(mappingFilePath);
		Workbook mappingWorkbook = new XSSFWorkbook(mappingFileInputStream);
		Map<String, String> jsonToExcelMapping = readMappingFromExcel(mappingWorkbook);
		Map<String, List<Map<String, String>>> ExcelValueMapping = readValueMappingFromExcel(mappingWorkbook);

		// Read JSON data
		for(File jsonFile : jsonFiles)
		{


			ObjectMapper objectMapper = new ObjectMapper();
			JsonNode rootNode = objectMapper.readTree(jsonFile);
			// Extract policy number from JSON
			String policyNumberJson = extractPolicyNumberFromJson(rootNode);
			System.out.println("Policy number  in json is"+policyNumberJson);

			if (policyNumberJson == null) {
				System.out.println("Skipping " + jsonFile.getName() + " : No Policy NUmber found.");
				continue;
			}
			// Check if policy number exists in Excel
			boolean policyExistsInExcel = checkPolicyNumberInExcel(workbook, policyNumberJson);
			System.out.println("Policy number is exist in excel "+ policyExistsInExcel);
			if (!policyExistsInExcel) {
				System.out.println("Policy number not found in Excel.");
				return;
			}

			// Extract data from JSON and Excel for the policy number and compare
			Map<String, String> jsonData = extractDataFromJson(rootNode, jsonToExcelMapping);
			Map<String, Map<String, String>> excelData = ExcelToMap1.returnData(excelFilePath,policyNumberJson);
			System.out.println("Excel Data is"+excelData);
			compareData(jsonData, excelData, jsonToExcelMapping, policyNumberJson, ExcelValueMapping);

			// Close resources
			workbook.close();
			fileInputStream.close();
		}

	}

	public static Map<String, String> readMappingFromExcel(Workbook workbook) {
		Map<String, String> mapping = new HashMap<>();
		Sheet mappingSheet = workbook.getSheet("Sheet1");

		for (Row row : mappingSheet) {
			if (row.getRowNum() == 0) continue; // Skip header row
			String jsonKey = getStringValue(row.getCell(0)); // JSON Key in Column A
			String excelColumn = getStringValue(row.getCell(1)); // Excel Column in Column B
			mapping.put(jsonKey, excelColumn);
		}

		return mapping;
	}

	public static Map<String, List<Map<String, String>>> readValueMappingFromExcel(Workbook workbook) {
		Map<String, List<Map<String, String>>> valueMapping = new HashMap<>();
		Sheet mappingSheet1 = workbook.getSheet("ValueMapping");

		if (mappingSheet1 == null) {
			throw new RuntimeException("ValueMapping sheet is missing in the provided workbook.");
		}

		for (Row row : mappingSheet1) {
			if (row.getRowNum() == 0) continue; // Skip header row

			String excelColumn = getStringValue(row.getCell(0)); // Excel Key in Column A
			String actualValue = getStringValue(row.getCell(1)); // Actual Value in Column B
			String expectedValue = getStringValue(row.getCell(2)); // Expected Value in Column C

			if (excelColumn == null || actualValue == null || expectedValue == null) {
				System.err.println("Invalid data in ValueMapping sheet at row: " + row.getRowNum());
				continue;
			}

			// Map to store actual and expected values

			Map<String, String> values = new HashMap<>();
			values.put("actual", actualValue);
			values.put("expected", expectedValue);

			valueMapping.computeIfAbsent(excelColumn, k->new ArrayList<>()).add(values);
		}

		return valueMapping;
	}


	public static String extractPolicyNumberFromJson(JsonNode rootNode) {
		String jsonKeyForPolicyNumber = "PolicyNumber";
		jsonKeyForPolicyNumber = "/" + jsonKeyForPolicyNumber;
		JsonNode policyNumberNode = rootNode.at(jsonKeyForPolicyNumber.replace(".", "/"));
		return policyNumberNode.isMissingNode() ? null : policyNumberNode.asText();
	}

	public static boolean checkPolicyNumberInExcel(Workbook workbook, String policyNumber) {
		Sheet sheet = workbook.getSheetAt(0);
		for (int i = 5; i <= sheet.getLastRowNum(); i++) {
			Row row = sheet.getRow(i);
			String policyNm = ExcelToMap1.getCellValueAsString(row.getCell(2));
			if (policyNumber.equals(policyNm)) {
				System.out.println("true");
				return true;
			}
		}
		return false;
	}

	public static Map<String, String> extractDataFromJson(JsonNode rootNode, Map<String, String> mapping) {
		Map<String, String> jsonData = new HashMap<>();
		for (String jsonKey : mapping.keySet()) {
			String value = getJsonValue(rootNode, jsonKey);
			if(value!=null)
			{
				jsonData.put(jsonKey, value);
			} else
			{
				System.out.println("Warning : JSON key missing -" +jsonKey);
			}

		}
		return jsonData;
	}

	public static String getJsonValue(JsonNode rootNode, String jsonPath) {
		String[] keys = jsonPath.split("\\.");
		JsonNode currentNode = rootNode;
		for (String key : keys) {
			if (key.contains("[")) {
				String arrayKey = key.substring(0, key.indexOf('['));
				int arrayIndex = Integer.parseInt(key.substring(key.indexOf('[') + 1, key.indexOf(']')));;
				currentNode = currentNode.path(arrayKey);
				if (!currentNode.isArray() || currentNode.size() <= arrayIndex) {
					return null;
				}
				currentNode = currentNode.get(arrayIndex);
			} else {
				currentNode = currentNode.path(key);
			}
			if (currentNode.isMissingNode()) {
				return null;
			}
		}
		return currentNode.isMissingNode() ? null : currentNode.asText();
	}

	public void compareData(Map<String, String> jsonData, Map<String, Map<String, String>> excelData,
			Map<String, String> jsonToExcelMapping, String policyNumberJson,
			Map<String, List<Map<String, String>>> excelValueMapping) {

		ExtentTest extractTest = null;
		ExtentTest subTest = null;
		ExtentReports tempReport = new ExtentReports("printpolicyvalidations.html");

		extractTest = tempReport.startTest("Validation Results for Policy - " + policyNumberJson);
		subTest = tempReport.startTest("Validate Print Policy Extract Fields in TRAD File");

		for (String key : jsonData.keySet()) {

			if(!jsonData.containsKey(key)){
				subTest.log(LogStatus.WARNING, "No mapping found for JSON key: " + key);
				continue;
			}
			String jsonValue = jsonData.get(key);
			String[] jsonKeyParts = key.split("\\.");

			// Extract the last part of the JSON Key
			String jsonKey = jsonKeyParts[jsonKeyParts.length - 1];

			// Map the JSON key to the Excel key
			String excelKey = jsonToExcelMapping.get(key);
			if (excelKey == null) {
				subTest.log(LogStatus.WARNING, "No mapping found for JSON key: " + key);
				continue;
			}

			String[] fieldKeyParts = excelKey.split("\\.");
			String fieldKey = fieldKeyParts[1];
			System.out.println("fieldKey "+fieldKey);
			//  System.out.println("excelKey "+excelKey);
			String excelValue = excelData.get(fieldKeyParts[0]).get(fieldKeyParts[1]);
			System.out.println("excelValue "+excelValue);
			//System.out.println("excelvalue "+excelValue);
			if (excelValue == null) {
				subTest.log(LogStatus.WARNING, "Excel data missing for key: " + key);
			} else {
				// Apply value mapping if it exists for the current Excel key
				if (excelValueMapping.containsKey(excelKey)) {

					List<Map<String, String>> valueMapping = excelValueMapping.get(excelKey);

					boolean matched=false;

					for(Map<String,String> valueMap : valueMapping) {
						String actualValue = valueMap.get("actual");
						String expectedValue = valueMap.get("expected");

						if (excelValue != null && actualValue != null && excelValue.trim().equalsIgnoreCase(actualValue.trim())) {
							excelValue = expectedValue;
							// System.out.println("excelvalue  valM"+excelValue);
							matched=true;
							break;
						}
					}	
				}

				// Handle percentage transformation
				if (isPercentage(jsonValue)) {
					jsonValue = convertPercentageToDecimal(jsonValue);
				}
				if (isPercentage(excelValue)) {
					excelValue = convertPercentageToDecimal(excelValue);
					// System.out.println("excelvalue P "+excelValue);
				}
				// Handle transformations (date and amount formatting)
				if (isDate(jsonValue)) {
					//                    Date excelDate = getExcelDate(excelValue);
					//                    excelValue = convertExcelDateToString(excelDate);
					//                    System.out.println("excelvalue D "+excelValue);
					Date jsonDate = getExcelDate(jsonValue);
					jsonValue = convertExcelDateToString(jsonDate);

					//	System.out.println("excelvalue Date "+excelValue);
					Date excelDate = getExcelDate(excelValue);
					//	System.out.println("excelDate Date "+excelDate);
					excelValue = convertExcelDateToString(excelDate);
					//System.out.println("excelValue Date "+excelValue);  
				}

				if (isAmount(jsonValue)) {
					jsonValue = cleanAndFormatAmount(jsonValue);
				}
				if (isNumeric(excelValue)) {

					double excelValue1 =Double.parseDouble(excelValue);
					//excelValue=Double.toString(excelValue1);
					DecimalFormat df=new DecimalFormat("0.##");
					excelValue=df.format(excelValue1);

				}
				//				if (isAmount(excelValue)) {
				//					System.out.println("excelValue without amount is "+excelValue); 
				//					 excelValue = cleanAndFormatAmount(excelValue);
				////					//excelValue=Double.removeTrailingZeros(excelValue1);
				////					//excelValue=
				////					System.out.println("excelValue1 amount is "+excelValue1); 
				////					  if (excelValue1.contains(".")) {
				////						  excelValue = excelValue1.replaceAll("0*$", "").replaceAll("\\.$", "");
				////						  System.out.println("excelValue amount is "+excelValue);
				////					  }
				////					  if (excelValue1.contains(".00")) {
				////						  excelValue = excelValue1.replaceAll("\\.00$", "");
				////						    System.out.println("excelValue amount is " + excelValue);
				////					  }
				//				}
				//				else
				//				{
				//					
				//				}
				if(fieldKey.equals("PolicyNumber")) {
					 try {
					        // Parse the excelValue as an integer
					        int excelValueInt = Integer.parseInt(excelValue);  // If it's a number, parse it to int

					        // Format the number with leading zeros (8 digits)
					        String excelValue1 = String.format("%08d", excelValueInt);

					        // Update the original excelValue
					        excelValue = excelValue1;
					    } catch (NumberFormatException e) {
					        // Handle the case where excelValue is not a valid number
					       // System.out.println("Error: The value of excelValue is not a valid number.");
					    }
				}
				if(jsonValue.equals("0") && (excelValue=="" || excelValue.isEmpty()))
				{
					jsonValue="";
				}
				if(excelValue.equals("0") && (jsonValue=="" || excelValue.isEmpty()))
				{
					jsonValue="0";
				}
				//excelValue = excelValue.trim();
				// Perform the comparison
				if (!jsonValue.equals(excelValue)) {
					subTest.log(LogStatus.FAIL, fieldKey + " not matched - PP Extract Value: [<font color='#FF0000'><b>" 
							+ jsonValue + "</b></font>] TRAD Value: [<font color='#FF0000'><b>" 
							+ excelValue + "</b></font>]");
				} else {
					subTest.log(LogStatus.PASS, fieldKey + " matched - PP Extract Value: [<font color='#30A0DB'><b>" 
							+ jsonValue + "</b></font>] TRAD Value: [<font color='#30A0DB'><b>" 
							+ excelValue + "</b></font>]");
				}
			}
		}

		extractTest.appendChild(subTest);
		addTestToMainReport(extractTest);
	}

	private static int getColumnIndex(String columnName) {
		return columnName.charAt(0) - 'A';
	}

	private static String getStringValue(Cell cell) {
		if (cell == null) {
			return ""; // Return empty string for null cells
		}
		DataFormatter dataFormatter=new DataFormatter();
		String cellValue=dataFormatter.formatCellValue(cell);
		switch (cell.getCellType()) {
		case STRING:
			//return cell.getStringCellValue().trim();
			return cell.getStringCellValue();
		case NUMERIC:
			if (DateUtil.isCellDateFormatted(cell)) {
				//return cell.getDateCellValue().toString(); // Convert date to string
				return convertExcelDateToString(cell.getDateCellValue());
			} else {
				double numericValue=cell.getNumericCellValue();
				//return String.valueOf((int) cell.getNumericCellValue()); // Convert numeric value to string
				return numericValue %1==0 ?String.valueOf((int) numericValue) :String.valueOf(numericValue);
			//return formatNumericValue(cellValue);
			}
		case BOOLEAN:
			return String.valueOf(cell.getBooleanCellValue());
		case FORMULA:
			try {
				return String.valueOf(cell.getNumericCellValue());
			} catch (IllegalStateException e) {
				return cell.getStringCellValue(); // If formula result is a string
			}
		default:
			return cellValue; // Return empty string for other types
		}
	}
	
	//Helper method to convert date to MM/dd/yyyy format
	private static String convertExcelDateToString(Date excelDate)
	{
		if(excelDate==null)
		{
			return "";
		}
		SimpleDateFormat dateFormat=new SimpleDateFormat("MM/dd/yyyy");
		return dateFormat.format(excelDate);
	}
	
	private static String formatNumericValues(String value)
	{
		try {
			double number=Double.parseDouble(value);
			if(number== Math.floor(number))
			{
				return String.format("%.0f", number);
			}
			else
			{
				return String.format("%.1f", number);
			}
		}catch (NumberFormatException e)
		{
			return value;
		}
	}
	public static boolean isPercentage(String value) {
		if (value == null || value.isEmpty()) {
			return false;
		}
		return value.contains("%");
	}
	public static boolean isNumeric(String value) {
		if (value == null || value.trim().isEmpty()) {
			return false;
		}
		try {
			Double.parseDouble(value);
			return true;
		}catch(NumberFormatException e) {
			return false;
		}
		//return value.matches("-?\\d+(\\.\\d+)?");
	}
	public static String convertPercentageToDecimal(String percentage) {
		if (percentage == null || percentage.isEmpty() || !percentage.contains("%")) {
			return percentage;
		}
		try {
			// Remove the '%' symbol and convert to double
			double percentageValue = Double.parseDouble(percentage.replace("%", "").trim());
			// Divide by 100 to convert to decimal
			return String.format("%.2f", percentageValue / 100);
		} catch (NumberFormatException e) {
			// In case of invalid percentage format, return the original value
			return percentage;
		}
	}
	// Helper method to check if the value is a valid date
	public static boolean isDate(String value) {
		if (value == null || value.isEmpty()) {
			return false;
		}
		String dateRegex = "^\\d{1,2}/\\d{1,2}/\\d{4}$";
		String isoRegex = "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.*$";
		return value.matches(dateRegex) || value.matches(isoRegex);
	}

//	// Helper method to convert date to MM/dd/yyyy format
//	public String convertExcelDateToString(Date date) {
//		if (date == null) {
//			return "";
//		}
//		SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
//		return dateFormat.format(date);
//	}

	// Helper method to get the date object from string value
	public Date getExcelDate(String excelValue) {
		try {
			// Check if the input value is valid
			if (excelValue == null || excelValue.isEmpty()) {
				//System.out.println("Input value is null or empty.");
				return null;
			}

			// Log the input value to ensure it is what you expect
			//	System.out.println("Attempting to parse: " + excelValue);

			// Check if the date format is the default Java toString() format (e.g., Mon Mar 17 00:00:00 PST 1966)
			if (excelValue.contains("Mon") || excelValue.contains("Tue") || excelValue.contains("Wed") || excelValue.contains("Thu")
					|| excelValue.contains("Sun") || excelValue.contains("Sat")) {

				// Date format for: "Sun Mar 27 00:00:00 EST 1966"
				SimpleDateFormat dateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy", Locale.ENGLISH);
				return dateFormat.parse(excelValue);
			}

			// Check if the value contains "T" for ISO8601 date format
			if (excelValue.contains("T")) {
				return parseISO8601Date(excelValue);
			}

			// Define date patterns to match (including the case for M/d/yyyy)
			String[] datePatterns = {
					"MM/dd/yyyy", "yyyy-MM-dd", "yyyy/MM/dd", "dd-MM-yyyy", "dd/MM/yyyy", "MM-dd-yyyy", "M/dd/yyyy", "M/d/yyyy"
			};

			// Try parsing the date with each pattern
			for (String pattern : datePatterns) {
				try {
					SimpleDateFormat dateFormat = new SimpleDateFormat(pattern, Locale.ENGLISH);
					System.out.println("Trying to parse with pattern: " + pattern);
					Date parsedDate = dateFormat.parse(excelValue);

					// If successful, return the parsed date
					if (parsedDate != null) {
						return parsedDate;
					}
				} catch (Exception e) {
					// Continue if this pattern fails
					System.out.println("Pattern failed: " + pattern);
					continue;
				}
			}

			// If no pattern worked, return null
			//	System.out.println("Could not parse date.");
			return null;
		} catch (Exception e) {
			// Print the stack trace in case of any unexpected errors
			e.printStackTrace();
			return null; // Return null if there is an error
		}
	}


	// Helper method to parse ISO 8601 date string
	private Date parseISO8601Date(String isoDate) {
		try {
			String datePart = isoDate.split("T")[0];
			SimpleDateFormat isoFormat = new SimpleDateFormat("yyyy-MM-dd");
			return isoFormat.parse(datePart);
		} catch (Exception e) {
			return null;
		}
	}


	public static boolean isAmount(String value) {
		if (value == null || value.isEmpty()) {
			return false;
		}
		// This regex handles currency symbols, comma separation, and decimal places
		//  String amountRegex = "^[\\$\\€]?\\d{1,3}(?:,\\d{3})*(\\.\\d{2})?$"
		String amountRegex="^[\\$\\€]?\\d{1,3}(?:,\\d{3})*(\\.\\d{2})?$";
		return value.matches(amountRegex);
	}


	public static String cleanAndFormatAmount(String amount) {
		// Check if the input is null or empty
		if (amount == null || amount.trim().isEmpty()) {
			return ""; // Return empty string if input is null or empty
		}

		// Remove any non-numeric characters except the decimal point
		String cleanedAmount = amount.replaceAll("[^\\d.]", "");

		// If the cleaned amount is still empty (in case the input was something like "$,,," or "$"), return empty
		if (cleanedAmount.isEmpty()) {
			return "";
		}

		// Create a BigDecimal to handle the amount properly
		BigDecimal bigDecimalAmount = new BigDecimal(cleanedAmount);

		// Set scale to 2, to keep only 2 decimals at maximum
		bigDecimalAmount = bigDecimalAmount.setScale(2, RoundingMode.HALF_UP);

		// Convert it to a string
		String result = bigDecimalAmount.toPlainString(); // toPlainString removes scientific notation

		// Remove trailing zeros after the decimal point
		if (result.contains(".")) {
			result = result.replaceAll("0*$", "");  // Remove trailing zeros
			if (result.endsWith(".")) {
				result = result.substring(0, result.length() - 1);  // Remove trailing decimal point if there's no value after it
			}
		}

		return result; // Return the cleaned and formatted amount
	}



	@AfterClass
	public void reportFlush() {
		mainReport.flush();
	}
}
