package com.nyl.printpolicy.excel;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.File;
import java.io.FileInputStream;
import java.util.LinkedHashMap;
import java.util.Map;

public class ExcelToMap {

    public static Map<String, Map<String, String>> returnData(String excelFilePath, String policyNm) {
        Map<String, Map<String, String>> dataMap = new LinkedHashMap<>();

        try (FileInputStream fis = new FileInputStream(new File(excelFilePath));
             Workbook workbook = new XSSFWorkbook(fis)) {

            for (int sheetNo = 0; sheetNo < workbook.getNumberOfSheets(); sheetNo++) {
                Sheet sheet = workbook.getSheetAt(sheetNo);
                String sheetName = sheet.getSheetName();
                System.out.println("Processing sheet: " + sheetName);

                Row headerRow = sheet.getRow(1); // Assuming headers are in the 2nd row (index 1)
                if (headerRow == null) {
                    System.err.println("Header row is missing in sheet: " + sheetName);
                    continue;
                }

                for (int i = 4; i <= sheet.getLastRowNum(); i++) {
                    Row row = sheet.getRow(i);
                    if (row == null || row.getCell(2) == null) { // Skip if row or policy column is empty
                        continue;
                    }

                    String policyNumber = getCellValueAsString(row.getCell(2));
                    if (policyNm.equals(policyNumber)) {
                        Map<String, String> rowData = new LinkedHashMap<>();

                        for (int j = 1; j < row.getLastCellNum(); j++) {
                            String columnName = getCellValueAsString(headerRow.getCell(j));
                            String cellValue = getCellValueAsString(row.getCell(j));
                            rowData.put(columnName, cellValue);
                        }

                        dataMap.put(sheetName, rowData);
                        break;
                    }
                }
            }

        } catch (Exception e) {
            System.err.println("Error processing Excel file: " + e.getMessage());
            e.printStackTrace();
        }

        System.out.println("Final data map for policy " + policyNm + ": " + dataMap);
        return dataMap;
    }

    public static String getCellValueAsString(Cell cell) {
        if (cell == null) {
            return "";
        }

        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue().trim();
            case NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) {
                    return cell.getDateCellValue().toString();
                } else {
                    return String.valueOf((long) cell.getNumericCellValue());
                }
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            case FORMULA:
                try {
                    return String.valueOf(cell.getNumericCellValue());
                } catch (IllegalStateException e) {
                    return cell.getStringCellValue();
                }
            default:
                return "";
        }
    }
}
