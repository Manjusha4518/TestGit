package test.fast.extractValidations;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.nyl.base.Constants;
import com.nyl.base.WebBase;
import com.nyl.printpolicy.excel.ExcelToMap;
import com.nyl.utilities.FASTSystemLibrary;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.util.DateFormatConverter;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrintPolicyValidation extends WebBase {

    @BeforeClass
    public void reportInitialize() {
        testResultsFolderPath = Constants.EXTRACTS_REPORTS_FOLDER_PATH;
        testReportName = "PrintPolicy";
        considerBlankValue = true;
        setupTestsAndReport();
    }

    @Parameters({"jsonFilePath", "excelFilePath", "mappingFilePath"})
    @Test
    public void validatePrintPolicyExtract(String jsonFilePath, String excelFilePath, String mappingFilePath) throws IOException {

    	
    	File jsonFolder=new File(jsonFilePath);
    	File[] jsonFiles=jsonFolder.listFiles((dir,name)->name.endsWith(".txt"));
    	
    	if(jsonFiles==null ||jsonFiles.length==0)
    	{
    		System.err.println("No JSON files found in the specified folder.");
    		return;
    	}
        
        
        

        // Load Excel workbook
        FileInputStream fileInputStream = new FileInputStream(excelFilePath);
        Workbook workbook = new XSSFWorkbook(fileInputStream);

        // Read mapping from Excel
        FileInputStream mappingFileInputStream = new FileInputStream(mappingFilePath);
        Workbook mappingWorkbook = new XSSFWorkbook(mappingFileInputStream);
        Map<String, String> jsonToExcelMapping = readMappingFromExcel(mappingWorkbook);
        Map<String, List<Map<String, String>>> ExcelValueMapping = readValueMappingFromExcel(mappingWorkbook);
     
        // Read JSON data
        for(File jsonFile : jsonFiles)
        {
        	ObjectMapper objectMapper = new ObjectMapper();
        	JsonNode rootNode = objectMapper.readTree(jsonFile);
        	 // Extract policy number from JSON
            String policyNumberJson = extractPolicyNumberFromJson(rootNode);
            System.out.println("Policy number  in json is"+policyNumberJson);
            
            if (policyNumberJson == null) {
                System.out.println("Skipping " + jsonFile.getName() + " : No Policy NUmber found.");
                continue;
            }
            // Check if policy number exists in Excel
            boolean policyExistsInExcel = checkPolicyNumberInExcel(workbook, policyNumberJson);
            System.out.println("Policy number is exist in excel "+ policyExistsInExcel);
            if (!policyExistsInExcel) {
                System.out.println("Policy number not found in Excel.");
                return;
            }

            // Extract data from JSON and Excel for the policy number and compare
            Map<String, String> jsonData = extractDataFromJson(rootNode, jsonToExcelMapping);
            Map<String, Map<String, String>> excelData = ExcelToMap.returnData(policyNumberJson);
            compareData(jsonData, excelData, jsonToExcelMapping, policyNumberJson, ExcelValueMapping);

            // Close resources
            workbook.close();
            fileInputStream.close();
        }
              
    }

    public static Map<String, String> readMappingFromExcel(Workbook workbook) {
        Map<String, String> mapping = new HashMap<>();
        Sheet mappingSheet = workbook.getSheet("Sheet1");

        for (Row row : mappingSheet) {
            if (row.getRowNum() == 0) continue; // Skip header row
            String jsonKey = getStringValue(row.getCell(0)); // JSON Key in Column A
            String excelColumn = getStringValue(row.getCell(1)); // Excel Column in Column B
            mapping.put(jsonKey, excelColumn);
        }

        return mapping;
    }

    public static Map<String, List<Map<String, String>>> readValueMappingFromExcel(Workbook workbook) {
        Map<String, List<Map<String, String>>> valueMapping = new HashMap<>();
        Sheet mappingSheet1 = workbook.getSheet("ValueMapping");

        if (mappingSheet1 == null) {
            throw new RuntimeException("ValueMapping sheet is missing in the provided workbook.");
        }

        for (Row row : mappingSheet1) {
            if (row.getRowNum() == 0) continue; // Skip header row

            String excelColumn = getStringValue(row.getCell(0)); // Excel Key in Column A
            String actualValue = getStringValue(row.getCell(1)); // Actual Value in Column B
            String expectedValue = getStringValue(row.getCell(2)); // Expected Value in Column C

            if (excelColumn == null || actualValue == null || expectedValue == null) {
                System.err.println("Invalid data in ValueMapping sheet at row: " + row.getRowNum());
                continue;
            }
          
            // Map to store actual and expected values
            Map<String, String> values = new HashMap<>();
            values.put("actual", actualValue);
            values.put("expected", expectedValue);

            valueMapping.computeIfAbsent(excelColumn, k->new ArrayList<>()).add(values);
        }

        return valueMapping;
    }
       

    public static String extractPolicyNumberFromJson(JsonNode rootNode) {
        String jsonKeyForPolicyNumber = "PolicyNumber";
        jsonKeyForPolicyNumber = "/" + jsonKeyForPolicyNumber;
        JsonNode policyNumberNode = rootNode.at(jsonKeyForPolicyNumber.replace(".", "/"));
        return policyNumberNode.isMissingNode() ? null : policyNumberNode.asText();
    }

    public static boolean checkPolicyNumberInExcel(Workbook workbook, String policyNumber) {
        Sheet sheet = workbook.getSheetAt(0);
        for (int i = 4; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            String policyNm = ExcelToMap.getCellValueAsString(row.getCell(2));
            if (policyNumber.equals(policyNm)) {
                return true;
            }
        }
        return false;
    }

    public static Map<String, String> extractDataFromJson(JsonNode rootNode, Map<String, String> mapping) {
        Map<String, String> jsonData = new HashMap<>();
        for (String jsonKey : mapping.keySet()) {
            String value = getJsonValue(rootNode, jsonKey);
            jsonData.put(jsonKey, value);
        }
        return jsonData;
    }

    public static String getJsonValue(JsonNode rootNode, String jsonPath) {
        String[] keys = jsonPath.split("\\.");
        JsonNode currentNode = rootNode;
        for (String key : keys) {
            if (key.contains("[")) {
                String arrayKey = key.substring(0, key.indexOf('['));
                int arrayIndex = Integer.parseInt(key.substring(key.indexOf('[') + 1, key.indexOf(']')));;
                currentNode = currentNode.path(arrayKey);
                if (!currentNode.isArray() || currentNode.size() <= arrayIndex) {
                    return null;
                }
                currentNode = currentNode.get(arrayIndex);
            } else {
                currentNode = currentNode.path(key);
            }
            if (currentNode.isMissingNode()) {
                return null;
            }
        }
        return currentNode.isMissingNode() ? null : currentNode.asText();
    }

    public void compareData(Map<String, String> jsonData, Map<String, Map<String, String>> excelData,
                            Map<String, String> jsonToExcelMapping, String policyNumberJson,
                            Map<String, List<Map<String, String>>> excelValueMapping) {

        ExtentTest extractTest = null;
        ExtentTest subTest = null;
        ExtentReports tempReport = new ExtentReports("printpolicyvalidations.html");

        extractTest = tempReport.startTest("Validation Results for Policy - " + policyNumberJson);
        subTest = tempReport.startTest("Validate Print Policy Extract Fields in TRAD File");

        for (String key : jsonData.keySet()) {
        	
        	if(!jsonToExcelMapping.containsKey(key)) continue;
        	
            String jsonValue = jsonData.get(key);
            String[] jsonKeyParts = key.split("\\.");

            // Extract the last part of the JSON Key
            String jsonKey = jsonKeyParts[jsonKeyParts.length - 1];

            // Map the JSON key to the Excel key
            String excelKey = jsonToExcelMapping.get(key);
            if (excelKey == null) {
                subTest.log(LogStatus.WARNING, "No mapping found for JSON key: " + key);
                continue;
            }

            String[] fieldKeyParts = excelKey.split("\\.");
            String fieldKey = fieldKeyParts[1];

            String excelValue = excelData.get(fieldKeyParts[0]).get(fieldKeyParts[1]);

            if (excelValue == null) {
                subTest.log(LogStatus.WARNING, "Excel data missing for key: " + key);
            } else {
                // Apply value mapping if it exists for the current Excel key
                if (excelValueMapping.containsKey(excelKey)) {
                	
                    List<Map<String, String>> valueMapping = excelValueMapping.get(excelKey);
                    
                    boolean matched=false;
                    
                    for(Map<String,String> valueMap : valueMapping) {
                    	 String actualValue = valueMap.get("actual");
                         String expectedValue = valueMap.get("expected");

                         if (excelValue != null && actualValue != null && excelValue.trim().equalsIgnoreCase(actualValue.trim())) {
                             excelValue = expectedValue;
                             matched=true;
                             break;
                         }
                     }	
                    }
                   
                // Handle percentage transformation
                if (isPercentage(jsonValue)) {
                    jsonValue = convertPercentageToDecimal(jsonValue);
                }
                if (isPercentage(excelValue)) {
                    excelValue = convertPercentageToDecimal(excelValue);
                }
                // Handle transformations (date and amount formatting)
                if (isDate(jsonValue)) {
                    Date excelDate = getExcelDate(excelValue);
                    excelValue = convertExcelDateToString(excelDate);
                }

                if (isAmount(jsonValue)) {
                    jsonValue = cleanAndFormatAmount(jsonValue);
                    excelValue = cleanAndFormatAmount(excelValue);
                }

                // Perform the comparison
                if (!jsonValue.equals(excelValue)) {
                    subTest.log(LogStatus.FAIL, fieldKey + " not matched - PP Extract Value: [<font color='#FF0000'><b>" 
                        + jsonValue + "</b></font>] TRAD Value: [<font color='#FF0000'><b>" 
                        + excelValue + "</b></font>]");
                } else {
                    subTest.log(LogStatus.PASS, fieldKey + " matched - PP Extract Value: [<font color='#30A0DB'><b>" 
                        + jsonValue + "</b></font>] TRAD Value: [<font color='#30A0DB'><b>" 
                        + excelValue + "</b></font>]");
                }
            }
        }

        extractTest.appendChild(subTest);
        addTestToMainReport(extractTest);
    }

    private static int getColumnIndex(String columnName) {
        return columnName.charAt(0) - 'A';
    }

    private static String getStringValue(Cell cell) {
        if (cell == null) {
            return ""; // Return empty string for null cells
        }
        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) {
                    return cell.getDateCellValue().toString(); // Convert date to string
                } else {
                    return String.valueOf((int) cell.getNumericCellValue()); // Convert numeric value to string
                }
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            case FORMULA:
                try {
                    return String.valueOf(cell.getNumericCellValue());
                } catch (IllegalStateException e) {
                    return cell.getStringCellValue(); // If formula result is a string
                }
            default:
                return ""; // Return empty string for other types
        }
    }
    public static boolean isPercentage(String value) {
        if (value == null || value.isEmpty()) {
            return false;
        }
        return value.contains("%");
    }
    public static String convertPercentageToDecimal(String percentage) {
        if (percentage == null || percentage.isEmpty() || !percentage.contains("%")) {
            return percentage;
        }
        try {
            // Remove the '%' symbol and convert to double
            double percentageValue = Double.parseDouble(percentage.replace("%", "").trim());
            // Divide by 100 to convert to decimal
            return String.format("%.2f", percentageValue / 100);
        } catch (NumberFormatException e) {
            // In case of invalid percentage format, return the original value
            return percentage;
        }
    }

    public static boolean isDate(String value) {
        if (value == null || value.isEmpty()) {
            return false;
        }
        String dateRegex = "^\\d{1,2}/\\d{1,2}/\\d{4}$";
        return value.matches(dateRegex);
    }

    public static Date getExcelDate(String excelValue) {
        try {
            if (excelValue == null || excelValue.isEmpty()) {
                return null;
            }

            // List of common date formats to try
            String[] datePatterns = {
                "EEE MMM dd HH:mm:ss z yyyy",  // e.g., "Sat Nov 25 00:00:00 EST 2034"
                "MM/dd/yyyy",                  // e.g., "11/25/2034"
                "yyyy-MM-dd",                  // e.g., "2034-11-25"
                "yyyy/MM/dd",                  // e.g., "2034/11/25"
                "dd-MM-yyyy",                  // e.g., "25-11-2034"
                "dd/MM/yyyy",                  // e.g., "25/11/2034"
                "MM-dd-yyyy",                  // e.g., "11-25-2034"
                "yyyy-MM-dd HH:mm:ss",         // e.g., "2034-11-25 00:00:00"
                "yyyy/MM/dd HH:mm:ss",         // e.g., "2034/11/25 00:00:00"
                "EEE MMM dd HH:mm:ss z",      // e.g., "Sat Nov 25 00:00:00 EST"
            };

            for (String pattern : datePatterns) {
                try {
                    SimpleDateFormat dateFormat = new SimpleDateFormat(pattern);
                    return dateFormat.parse(excelValue);
                } catch (Exception e) {
                    // If the current pattern fails, try the next one
                    continue;
                }
            }

            // If none of the date formats work, print an error message
            System.out.println("Error parsing Excel date: " + excelValue);
            return null;
        } catch (Exception e) {
            System.out.println("Error parsing Excel date: " + excelValue);
            return null;
        }
    }


    public static String convertExcelDateToString(Date excelDate) {
        if (excelDate == null) {
            return "";
        }
        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        return dateFormat.format(excelDate);
    }

    public static boolean isAmount(String value) {
        if (value == null || value.isEmpty()) {
            return false;
        }
        String amountRegex = "^[\\$\\€]?\\d{1,3}(,\\d{3})*(\\.\\d{2})?$";
        return value.matches(amountRegex);
    }

    public static String cleanAndFormatAmount(String amount) {
        // Check if the input is null or empty
        if (amount == null || amount.trim().isEmpty()) {
            return ""; // Return empty string if input is null or empty
        }

        // Remove any non-numeric characters except the decimal point and commas
        String cleanedAmount = amount.replaceAll("[^\\d.]", "");

        // If the cleaned amount is still empty (in case the input was something like "$,,," or "$"), return empty
        if (cleanedAmount.isEmpty()) {
            return "";
        }

        // If there's a decimal part
        if (cleanedAmount.contains(".")) {
            String[] parts = cleanedAmount.split("\\.");

            // Ensure the fractional part has two digits
            if (parts[1].length() == 1) {
                cleanedAmount = cleanedAmount + "0"; // e.g., 5457.6 -> 5457.60
            }

            // If the fractional part is ".00", format as an integer
            if (cleanedAmount.endsWith(".00")) {
                return String.format("%.0f", Double.parseDouble(cleanedAmount)); // Removes decimals if it's .00
            }

            // Ensure the format is correct with two decimal places
            return String.format("%.2f", Double.parseDouble(cleanedAmount)); // Keeps two decimals if not .00
        }

        // If there's no decimal point, return the cleaned amount as an integer (no decimal places)
        return String.format("%.0f", Double.parseDouble(cleanedAmount)); // No decimals for integer values
    }



    
    @AfterClass
    public void reportFlush() {
        mainReport.flush();
    }
}
